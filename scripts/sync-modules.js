// scripts/sync-modules.js
const fs = require('node:fs') // Use node: prefix for built-ins
const path = require('node:path')

const rendererModulesBaseDir = path.join(__dirname, '../src/renderer/src/modules')

const rendererModulesRegistryPath = path.join(rendererModulesBaseDir, 'modules.ts')
const mainModulesRegistryPath = path.join(rendererModulesBaseDir, 'modules.main.ts') // Generated here

let rendererImports = '// THIS FILE IS AUTO-GENERATED BY scripts/sync-modules.js\n// @ts-nocheck \n'
let rendererExports = 'export default {\n'

let mainImports = `// THIS FILE IS AUTO-GENERATED BY scripts/sync-modules.js\n`
mainImports += `import type { IOMainModulePart } from '../../main/moduleLoader.js'; // Adjust path if IOMainModulePart moves\n`
let mainHandlersArray = 'export const mainModuleHandlers: IOMainModulePart[] = [\n'

try {
  const moduleDirs = fs
    .readdirSync(rendererModulesBaseDir, { withFileTypes: true })
    .filter((dirent) => dirent.isDirectory())
    .map((dirent) => dirent.name)

  for (const moduleName of moduleDirs) {
    const rendererModuleFile = `./${moduleName}/${moduleName}.js` // Path for import statement
    const mainLogicFileSource = path.join(
      rendererModulesBaseDir,
      moduleName,
      `${moduleName}.main.ts`
    )
    const mainLogicFileImport = `./${moduleName}/${moduleName}.main.js` // Path for import statement

    // --- Part 1: Generate for renderer/src/modules/modules.ts ---
    const moduleVarName = `${moduleName.toLowerCase().replace(/-/g, '')}Module` // e.g., keyboardmodule, midimodule
    rendererImports += `import * as ${moduleVarName} from '${rendererModuleFile}';\n`
    rendererExports += `  [${moduleVarName}.id]: ${moduleVarName},\n`

    // --- Part 2: Generate for renderer/src/modules/modules.main.ts ---
    if (fs.existsSync(mainLogicFileSource)) {
      const mainModuleVarName = `${moduleName.toLowerCase().replace(/-/g, '')}Main`
      mainImports += `import ${mainModuleVarName} from '${mainLogicFileImport}'; // Assumes default export from .main.ts files\n`
      // Assuming the .main.ts file default exports an object matching IOMainModulePart
      mainHandlersArray += `  ${mainModuleVarName},\n`
    }
  }

  rendererExports += '};\n'
  fs.writeFileSync(rendererModulesRegistryPath, rendererImports + '\n' + rendererExports)
  console.log(`✅ Generated Renderer Modules Registry: ${rendererModulesRegistryPath}`)

  mainHandlersArray += '];\n'
  fs.writeFileSync(mainModulesRegistryPath, mainImports + '\n' + mainHandlersArray)
  console.log(`✅ Generated Main Modules Registry: ${mainModulesRegistryPath}`)
} catch (error) {
  console.error('❌ Error syncing modules:', error)
  process.exit(1)
}
