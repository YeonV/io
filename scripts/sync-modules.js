// scripts/sync-modules.js
import fs from 'node:fs'
import path from 'node:path'
import { fileURLToPath } from 'node:url'

const __filename = fileURLToPath(import.meta.url)
const __dirname = path.dirname(__filename)

const rendererModulesBaseDir = path.join(__dirname, '../src/renderer/src/modules')
// Assuming main-side logic files are co-located for this script version:
// e.g., src/renderer/src/modules/Alexa/Alexa.main.ts

const rendererModulesRegistryPath = path.join(rendererModulesBaseDir, 'modules.ts')
const mainProcessModulesRegistryPath = path.join(rendererModulesBaseDir, 'modules.main.ts')

let rendererImportsArray = []
let rendererExportsArray = []
let mainRegistryImportsArray = [
    `import type { IOMainModulePart } from '../../../shared/types.js'` // Path from generated modules.main.ts to shared/types.ts
]
let mainRegistryHandlersArray = []

try {
    const moduleDirs = fs.readdirSync(rendererModulesBaseDir, { withFileTypes: true })
        .filter(dirent => dirent.isDirectory())
        .map(dirent => dirent.name)

    for (const moduleName of moduleDirs) {
        // --- Check for Renderer Module File ---
        const rendererModuleSourceFile = path.join(rendererModulesBaseDir, moduleName, `${moduleName}.tsx`)
        const rendererModuleFileForImport = `./${moduleName}/${moduleName}.js`

        if (fs.existsSync(rendererModuleSourceFile)) {
            const moduleVarName = `${moduleName.toLowerCase().replace(/-/g, '')}Module`
            rendererImportsArray.push(`import * as ${moduleVarName} from '${rendererModuleFileForImport}'`)
            // We rely on each .tsx module exporting an 'id'
            rendererExportsArray.push(`  [${moduleVarName}.id]: ${moduleVarName}`)

            // --- Check for corresponding Main Process Logic File ---
            const mainLogicSourceFile = path.join(rendererModulesBaseDir, moduleName, `${moduleName}.main.ts`)
            const mainLogicFileForImport = `./${moduleName}/${moduleName}.main.js`

            if (fs.existsSync(mainLogicSourceFile)) {
                const mainModuleVarName = `${moduleName.toLowerCase().replace(/-/g, '')}Main`
                // Assumes ModuleName.main.ts default exports the IOMainModulePart compatible object
                mainRegistryImportsArray.push(`import ${mainModuleVarName} from '${mainLogicFileForImport}'`)
                mainRegistryHandlersArray.push(`  ${mainModuleVarName}`)
            }
        } else {
            console.warn(`WW Sync-Modules: Skipped directory '${moduleName}' as it does not contain a '${moduleName}.tsx' file.`)
        }
    }

    // Construct renderer modules.ts content
    let rendererFileContent = "// THIS FILE IS AUTO-GENERATED BY scripts/sync-modules.js\n// @ts-nocheck\n\n"
    rendererFileContent += rendererImportsArray.join('\n') + (rendererImportsArray.length ? '' : '') + '\n\n'
    rendererFileContent += 'export default {\n'
    rendererFileContent += rendererExportsArray.join(',\n') +'\n'
    rendererFileContent += '}\n'
    fs.writeFileSync(rendererModulesRegistryPath, rendererFileContent)
    console.log(`✅ Generated Renderer Modules Registry: ${rendererModulesRegistryPath}`)

    // Construct main modules.main.ts content
    let mainFileContent = "// THIS FILE IS AUTO-GENERATED BY scripts/sync-modules.js\n\n"
    mainFileContent += mainRegistryImportsArray.join('\n') + (mainRegistryImportsArray.length ? '' : '') + '\n\n'
    mainFileContent += 'export const mainModuleHandlers: IOMainModulePart[] = [\n'
    mainFileContent += mainRegistryHandlersArray.join(',\n') + '\n'
    mainFileContent += ']\n'
    fs.writeFileSync(mainProcessModulesRegistryPath, mainFileContent)
    console.log(`✅ Generated Main Process Modules Registry: ${mainProcessModulesRegistryPath}`)

} catch (error) {
    console.error("❌ Error syncing modules:", error)
    process.exit(1)
}