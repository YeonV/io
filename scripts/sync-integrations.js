// scripts/sync-integrations.js
import fs from 'node:fs';
import path from 'node:path';
import { fileURLToPath } from 'node:url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// --- Configuration ---
const integrationsBaseDir = path.join(__dirname, '../src/renderer/src/integrations');
const sharedDir = path.join(__dirname, '../src/shared'); // For shared types and IDs

// Output file paths
const rendererRegistryPath = path.join(integrationsBaseDir, 'integrations.ts');
const mainProcessRegistryPath = path.join(integrationsBaseDir, 'integrations.main.ts');
const sharedIntegrationIdsPath = path.join(sharedDir, 'integration-ids.ts');

// --- Script Logic ---
let rendererImportsArray = [];
let rendererListEntriesArray = [];
let rendererMapEntriesArray = [];

let mainImportsArray = [];
let mainHandlersArray = [];

let sharedIdTypeUnionArray = [];
let sharedIdConstArray = [];

try {
  const integrationDirs = fs.readdirSync(integrationsBaseDir, { withFileTypes: true })
    .filter(dirent => dirent.isDirectory() && dirent.name !== 'components' && dirent.name !== 'utils') // Exclude common utility folders
    .map(dirent => dirent.name); // Expect PascalCase folder names, e.g., HomeAssistant

  for (const integrationFolderName of integrationDirs) {
    const settingsFilePath = path.join(integrationsBaseDir, integrationFolderName, `${integrationFolderName}.settings.tsx`);
    const mainFilePath = path.join(integrationsBaseDir, integrationFolderName, `${integrationFolderName}.main.ts`);

    // --- Process Renderer Part (Settings) ---
    if (fs.existsSync(settingsFilePath)) {
      const settingsFileForImport = `./${integrationFolderName}/${integrationFolderName}.settings`;
      
      // Variable names based on folder name (e.g., homeAssistantConfig, HomeAssistantSettingsComponent)
      const configVarName = `${integrationFolderName.charAt(0).toLowerCase() + integrationFolderName.slice(1)}Config`;
      const componentVarName = `${integrationFolderName}SettingsComponent`;

      rendererImportsArray.push(`import { default as ${componentVarName}, integrationConfig as ${configVarName} } from '${settingsFileForImport}';`);
      
      // Entry for integrationsList (FullIntegrationDefinition)
      const fullDefEntry = `{ ...${configVarName}, SettingsComponent: ${componentVarName} }`;
      rendererListEntriesArray.push(`  ${fullDefEntry}`);
      
      // Entry for integrationsMap (key is configVarName.id)
      rendererMapEntriesArray.push(`  [${configVarName}.id]: ${fullDefEntry}`);

      // --- For shared/integration-ids.ts ---
      // Derive kebab-case ID from PascalCase folder name
      // HomeAssistant -> home-assistant
      // SomeOther -> some-other
      const kebabCaseId = integrationFolderName
        .replace(/([A-Z])/g, (match, p1, offset) => (offset > 0 ? '-' : '') + p1.toLowerCase())
        .toLowerCase();
      
      if (kebabCaseId) {
        sharedIdTypeUnionArray.push(`  | '${kebabCaseId}'`);
        sharedIdConstArray.push(`  '${kebabCaseId}'`);
      } else {
        console.warn(`WW Sync-Integrations: Could not derive a valid kebab-case ID for folder '${integrationFolderName}'. Skipping for shared IDs.`);
      }

    } else {
      console.warn(`WW Sync-Integrations: Skipped directory '${integrationFolderName}' for renderer registry as it does not contain '${integrationFolderName}.settings.tsx'.`);
    }

    // --- Process Main Part ---
    if (fs.existsSync(mainFilePath)) {
      const mainFileForImport = `./${integrationFolderName}/${integrationFolderName}.main`;
      // Assuming default export from *.main.ts is the IOMainIntegrationPart object
      const mainPartVarName = `${integrationFolderName.charAt(0).toLowerCase() + integrationFolderName.slice(1)}MainPart`;
      
      mainImportsArray.push(`import ${mainPartVarName} from '${mainFileForImport}';`);
      mainHandlersArray.push(`  ${mainPartVarName}`);
    }
    // No warning if main part doesn't exist, as it's optional per integration
  }

  // --- Generate src/renderer/src/integrations/integrations.ts ---
  let rendererFileContent = "// THIS FILE IS AUTO-GENERATED BY scripts/sync-integrations.js\n\n";
  rendererFileContent += `import type { FullIntegrationDefinition, IntegrationId } from '../../../shared/integration-types';\n\n`; // Adjust path as needed
  rendererFileContent += rendererImportsArray.join('\n') + (rendererImportsArray.length ? '\n\n' : '\n');
  
  rendererFileContent += 'export const integrationsList: FullIntegrationDefinition[] = [\n';
  rendererFileContent += rendererListEntriesArray.join(',\n') + (rendererListEntriesArray.length ? '\n' : '');
  rendererFileContent += '];\n\n';

  rendererFileContent += 'export const integrationsMap: Record<IntegrationId, FullIntegrationDefinition> = {\n';
  rendererFileContent += rendererMapEntriesArray.join(',\n') + (rendererMapEntriesArray.length ? '\n' : '');
  rendererFileContent += '};\n';
  
  fs.writeFileSync(rendererRegistryPath, rendererFileContent);
  console.log(`✅ Generated Renderer Integrations Registry: ${rendererRegistryPath}`);

  // --- Generate src/renderer/src/integrations/integrations.main.ts ---
  let mainFileContent = "// THIS FILE IS AUTO-GENERATED BY scripts/sync-integrations.js\n\n";
  mainFileContent += `import type { IOMainIntegrationPart } from '../../../shared/integration-types';\n\n`; // Adjust path
  mainFileContent += mainImportsArray.join('\n') + (mainImportsArray.length ? '\n\n' : '\n');

  mainFileContent += 'export const mainIntegrationHandlers: IOMainIntegrationPart[] = [\n';
  mainFileContent += mainHandlersArray.join(',\n') + (mainHandlersArray.length ? '\n' : '');
  mainFileContent += '];\n';

  fs.writeFileSync(mainProcessRegistryPath, mainFileContent);
  console.log(`✅ Generated Main Process Integrations Registry: ${mainProcessRegistryPath}`);
  
  // --- Generate src/shared/integration-ids.ts ---
  let sharedIdsFileContent = "// THIS FILE IS AUTO-GENERATED BY scripts/sync-integrations.js\n\n";
  if (sharedIdTypeUnionArray.length > 0) {
    sharedIdsFileContent += "export type IntegrationId =\n" + sharedIdTypeUnionArray.join('\n') + ';\n\n';
    sharedIdsFileContent += "export const ALL_INTEGRATION_IDS: IntegrationId[] = [\n" + sharedIdConstArray.join(',\n') + (sharedIdConstArray.length ? '\n' : '');
    sharedIdsFileContent += "];\n";
  } else {
    sharedIdsFileContent += "export type IntegrationId = never;\n\n";
    sharedIdsFileContent += "export const ALL_INTEGRATION_IDS: IntegrationId[] = [];\n";
    console.log(`ℹ️ No integrations found to generate IntegrationId type and const. Created empty definitions.`);
  }
  fs.writeFileSync(sharedIntegrationIdsPath, sharedIdsFileContent);
  console.log(`✅ Generated Shared Integration IDs: ${sharedIntegrationIdsPath}`);

} catch (error) {
  console.error("❌ Error syncing integrations:", error);
  process.exit(1);
}