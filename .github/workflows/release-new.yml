name: Create App Release NEW

on:
  workflow_dispatch:
    inputs:
      version_override:
        description: 'Version Override (e.g., 0.2.6-beta). Leave empty for package.json version.'
        required: false
        type: string
        default: ''
      build_macos_intel:
        description: 'Build for macOS (Intel x64)'
        default: true
        type: boolean
      build_macos_arm64:
        description: 'Build for macOS (ARM64/Silicon)'
        default: true
        type: boolean
      build_ubuntu:
        description: 'Build for Ubuntu Linux (x64)'
        default: true
        type: boolean
      build_windows:
        description: 'Build for Windows (x64)'
        default: true
        type: boolean
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+*'

jobs:
  prepare_release_data:
    name: Prepare Release Data
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      current_version: ${{ github.event.inputs.version_override || steps.package-version.outputs.current-version }}
      release_body_file: .release-notes.md
      build_matrix_json: ${{ steps.set-matrix.outputs.build_matrix_json }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Get App Version from package.json
        id: package-version
        if: github.event.inputs.version_override == ''
        uses: martinbeentjes/npm-get-version-action@v1.3.0
      - name: Output overridden version if provided
        if: github.event.inputs.version_override != ''
        run: echo "Using overridden version ${{ github.event.inputs.version_override }}"
      - name: Generate Release Notes
        id: generate_notes
        run: |
          if git describe --tags --abbrev=0 @^ > /dev/null 2>&1; then
            git log --pretty=format:"+ %s" $(git describe --tags --abbrev=0 @^)..@ > .release-notes.md
          else
            echo "+ Initial release or no previous tags found." > .release-notes.md
          fi
      - name: Create GitHub Release
        id: create_release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.version_override || steps.package-version.outputs.current-version }}
          release_name: Release ${{ github.event.inputs.version_override || steps.package-version.outputs.current-version }}
          body_path: .release-notes.md
          draft: false
          prerelease: contains(github.ref, 'beta') || contains(github.ref, 'alpha') || contains(github.ref, 'rc')
      - name: Prepare Build Matrix
        id: set-matrix
        shell: bash
        run: |
          matrix_include_array=()
          if [[ "${{ github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.build_macos_intel == true) }}" == "true" ]]; then
            matrix_include_array+=('{"platform_id": "macos_intel", "platform_name": "macOS Intel", "os_runner": "macos-13", "asset_file_part": "Installer-Intel", "asset_extension": "dmg", "asset_content_type": "application/x-apple-diskimage", "needs_rebuild": true, "cxx_flags": "-std=c++20 -stdlib=libc++", "gyp_defines": "mac_deployment_target=11.0 clang_cxx_language_standard=c++20 clang_cxx_library=libc++", "deployment_target": "11.0", "python_path_command": "which python3"}')
          fi
          if [[ "${{ github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.build_macos_arm64 == true) }}" == "true" ]]; then
            matrix_include_array+=('{"platform_id": "macos_arm64", "platform_name": "macOS ARM64", "os_runner": "macos-14", "asset_file_part": "Installer-ARM64", "asset_extension": "dmg", "asset_content_type": "application/x-apple-diskimage", "needs_rebuild": true, "cxx_flags": "-std=c++20 -stdlib=libc++", "gyp_defines": "mac_deployment_target=11.0 clang_cxx_language_standard=c++20 clang_cxx_library=libc++", "deployment_target": "11.0", "python_path_command": "which python3"}')
          fi
          if [[ "${{ github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.build_ubuntu == true) }}" == "true" ]]; then
            matrix_include_array+=('{"platform_id": "linux", "platform_name": "Linux", "os_runner": "ubuntu-latest", "asset_file_part": "Installer", "asset_extension": "AppImage", "asset_content_type": "application/x-iso9660-appimage", "needs_rebuild": true, "cxx_flags": "", "gyp_defines": "", "deployment_target": "", "python_path_command": "which python3"}')
          fi
          if [[ "${{ github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.build_windows == true) }}" == "true" ]]; then
            matrix_include_array+=('{"platform_id": "windows", "platform_name": "Windows", "os_runner": "windows-latest", "asset_file_part": "Setup", "asset_extension": "exe", "asset_content_type": "application/vnd.microsoft.portable-executable", "needs_rebuild": true, "cxx_flags": "", "gyp_defines": "", "deployment_target": "", "python_path_command": "python"}')
          fi
          joined_includes=$(IFS=,; echo "${matrix_include_array[*]}")
          final_matrix_json="{\"include\": [${joined_includes}]}"
          echo "build_matrix_json=${final_matrix_json}" >> $GITHUB_OUTPUT

  build_app: 
    name: Build App (${{ matrix.platform_name }})
    needs: prepare_release_data
    runs-on: ${{ matrix.os_runner }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.prepare_release_data.outputs.build_matrix_json) }}
    env:
      NODE_VERSION: '20.x'
      PYTHON_VERSION: '3.11'
      MACOSX_DEPLOYMENT_TARGET: ${{ matrix.deployment_target }}
      GYP_DEFINES: ${{ matrix.gyp_defines }}
      CXXFLAGS: ${{ matrix.cxx_flags }}
      CFLAGS: '-std=c17'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install Python build dependencies
        run: python -m pip install --upgrade pip setuptools wheel
      - name: Install Linux dependencies
        if: matrix.platform_id == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libxtst-dev libpng++-dev libx11-dev libxkbfile-dev libsecret-1-dev build-essential python3          
      - name: Install Node Modules
        run: yarn install --frozen-lockfile --ignore-scripts
      - name: Rebuild native modules
        if: matrix.needs_rebuild == true
        run: PYTHON=$(${{ matrix.python_path_command }}) yarn rebuild
      - name: Build Project (Unix)
        if: matrix.platform_id == 'macos_intel' || matrix.platform_id == 'macos_arm64' || matrix.platform_id == 'linux'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
          REACT_APP_VERSION: ${{ needs.prepare_release_data.outputs.current_version }}
        run: yarn dist -p "never" 
      - name: Build Project (Windows)
        if: matrix.platform_id == 'windows'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REACT_APP_VERSION: ${{ needs.prepare_release_data.outputs.current_version }}
        shell: pwsh
        run: |
          $env:GH_TOKEN = "${{ secrets.GH_TOKEN }}"
          yarn dist -p "never"
      - name: Upload Release Asset
        if: startsWith(github.ref, 'refs/tags/v') && needs.prepare_release_data.outputs.upload_url != ''
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.prepare_release_data.outputs.upload_url }}
          asset_path: ./dist/io-${{ needs.prepare_release_data.outputs.current_version }}-${{ matrix.asset_file_part }}.${{ matrix.asset_extension }}
          asset_name: io-${{ matrix.platform_id }}.${{ matrix.asset_extension }}
          asset_content_type: ${{ matrix.asset_content_type }}
      - name: Upload Build Artifact
        if: github.event_name == 'workflow_dispatch'
        uses: actions/upload-artifact@v4 
        with:
          name: io-${{ matrix.platform_id }}-${{ needs.prepare_release_data.outputs.current_version }}
          path: ./dist/io-${{ needs.prepare_release_data.outputs.current_version }}-${{ matrix.asset_file_part }}.${{ matrix.asset_extension }}
          retention-days: 7