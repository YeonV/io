name: IO Production Release

on:
  push:
    branches:
      - main

jobs:
  create_github_release:
    name: Create GitHub Release
    if: startsWith(github.event.head_commit.message, 'Release')
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      current_version: ${{ steps.package-version.outputs.current-version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Get App Version
        id: package-version
        uses: martinbeentjes/npm-get-version-action@v1.3.0
      - name: Generate Release Notes
        id: generate_notes
        run: |
          if git describe --tags --abbrev=0 @^ > /dev/null 2>&1; then
            git log --pretty=format:"+ %s" $(git describe --tags --abbrev=0 @^)..@ > .release-notes.md
          else
            echo "+ Release based on current changes." > .release-notes.md
          fi
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.package-version.outputs.current-version }}
          release_name: Release v${{ steps.package-version.outputs.current-version }}
          body_path: .release-notes.md
          draft: false
          prerelease: contains(steps.package-version.outputs.current-version, 'beta') || contains(steps.package-version.outputs.current-version, 'alpha') || contains(steps.package-version.outputs.current-version, 'rc')

  build_and_upload_assets:
    name: Build & Upload (${{ matrix.os_name }})
    needs: create_github_release
    if: needs.create_github_release.outputs.upload_url != ''
    runs-on: ${{ matrix.os_runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os_id: macos_intel
            os_name: macOS Intel
            os_runner: macos-13
            ASSET_FILEPART_DMG: Installer
            ASSET_EXTENSION_DMG: dmg
            ASSET_CONTENT_TYPE_DMG: application/x-apple-diskimage
            ASSET_FILEPART_ZIP: mac # Corresponds to FILEPART2
            ASSET_EXTENSION_ZIP: zip # Corresponds to OSEND2
            ASSET_CONTENT_TYPE_ZIP: application/zip # Corresponds to ASSET_CONTENT_TYPE2
            PYTHON_PATH_COMMAND: which python3
          - os_id: macos_arm64
            os_name: macOS ARM64
            os_runner: macos-14
            ASSET_FILEPART_DMG: Installer
            ASSET_EXTENSION_DMG: dmg
            ASSET_CONTENT_TYPE_DMG: application/x-apple-diskimage
            ASSET_FILEPART_ZIP: arm64-mac
            ASSET_EXTENSION_ZIP: zip
            ASSET_CONTENT_TYPE_ZIP: application/zip
            PYTHON_PATH_COMMAND: which python3
          - os_id: linux
            os_name: Ubuntu Linux
            os_runner: ubuntu-latest
            ASSET_FILEPART_APPIMAGE: Installer # Corresponds to FILEPART
            ASSET_EXTENSION_APPIMAGE: AppImage # Corresponds to OSEND
            ASSET_CONTENT_TYPE_APPIMAGE: application/x-x86-64-appimage # Corresponds to ASSET_CONTENT_TYPE
            PYTHON_PATH_COMMAND: which python3
          - os_id: windows
            os_name: Windows
            os_runner: windows-latest
            ASSET_FILEPART_EXE: Setup # Corresponds to FILEPART
            ASSET_EXTENSION_EXE: exe # Corresponds to OSEND
            ASSET_CONTENT_TYPE_EXE: application/vnd.microsoft.portable-executable # Corresponds to ASSET_CONTENT_TYPE
            PYTHON_PATH_COMMAND: python
            
    env:
      NODE_VERSION: '22.x'
      PYTHON_VERSION: '3.12'
      APP_VERSION: ${{ needs.create_github_release.outputs.current_version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install Python build dependencies
        run: python -m pip install --upgrade pip setuptools wheel
      
      - name: Install Linux system dependencies (for robotjs runtime)
        if: matrix.os_id == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libxtst-dev libpng++-dev
      
      - name: Install Node Modules (scripts ignored initially)
        shell: bash
        run: |
          yarn config set network-timeout 120000
          yarn config set registry https://registry.npmjs.org/
          yarn install --frozen-lockfile --ignore-scripts

      - name: Place Prebuilt robotjs.node
        shell: bash
        run: |
          ROBOTJS_TARGET_DIR="./node_modules/robotjs/build/Release"
          mkdir -p "$ROBOTJS_TARGET_DIR"
          PREBUILT_SOURCE_PATH="./prebuilds/robotjs/${{ matrix.os_id }}/robotjs.node"
          if [[ -f "$PREBUILT_SOURCE_PATH" ]]; then
            echo "Copying $PREBUILT_SOURCE_PATH to $ROBOTJS_TARGET_DIR/robotjs.node for ${{ matrix.os_id }}"
            cp "$PREBUILT_SOURCE_PATH" "$ROBOTJS_TARGET_DIR/robotjs.node"
          else
            echo "ERROR: Prebuilt robotjs binary not found at $PREBUILT_SOURCE_PATH for ${{ matrix.os_id }}."
            echo "This release workflow requires prebuilt binaries. Generate them using the IO Builder workflow."
            exit 1
          fi
      
      - name: Run Custom Postinstall (for other native deps if any)
        shell: bash
        run: yarn run customPostinstall

      - name: Build Project (Packaging App)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
          REACT_APP_VERSION: ${{ env.APP_VERSION }}
        run: yarn dist -p "never"

      - name: Upload macOS DMG Release Asset
        if: matrix.os_id == 'macos_intel' || matrix.os_id == 'macos_arm64'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_github_release.outputs.upload_url }}
          asset_path: ./dist/io-${{ env.APP_VERSION }}-${{ matrix.ASSET_FILEPART_DMG }}.${{ matrix.ASSET_EXTENSION_DMG }}
          asset_name: io-${{ matrix.os_id }}.${{ matrix.ASSET_EXTENSION_DMG }}
          asset_content_type: ${{ matrix.ASSET_CONTENT_TYPE_DMG }}

      - name: Upload macOS ZIP Release Asset
        if: matrix.os_id == 'macos_intel' || matrix.os_id == 'macos_arm64'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_github_release.outputs.upload_url }}
          asset_path: ./dist/io-${{ env.APP_VERSION }}-${{ matrix.ASSET_FILEPART_ZIP }}.${{ matrix.ASSET_EXTENSION_ZIP }}
          asset_name: io-${{ matrix.os_id }}.${{ matrix.ASSET_EXTENSION_ZIP }}
          asset_content_type: ${{ matrix.ASSET_CONTENT_TYPE_ZIP }}

      - name: Upload Linux AppImage Release Asset
        if: matrix.os_id == 'linux'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_github_release.outputs.upload_url }}
          asset_path: ./dist/io-${{ env.APP_VERSION }}-${{ matrix.ASSET_FILEPART_APPIMAGE }}.${{ matrix.ASSET_EXTENSION_APPIMAGE }}
          asset_name: io-${{ matrix.os_id }}.${{ matrix.ASSET_EXTENSION_APPIMAGE }}
          asset_content_type: ${{ matrix.ASSET_CONTENT_TYPE_APPIMAGE }}

      - name: Upload Windows EXE Release Asset
        if: matrix.os_id == 'windows'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_github_release.outputs.upload_url }}
          asset_path: ./dist/io-${{ env.APP_VERSION }}-${{ matrix.ASSET_FILEPART_EXE }}.${{ matrix.ASSET_EXTENSION_EXE }}
          asset_name: io-${{ matrix.os_id }}.${{ matrix.ASSET_EXTENSION_EXE }}
          asset_content_type: ${{ matrix.ASSET_CONTENT_TYPE_EXE }}