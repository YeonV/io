name: Create App Release

on:
  push:
    branches: [main]

jobs:
  create_release:
    name: Create release
    if: "startsWith(github.event.head_commit.message, 'Release')"
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      current-version: ${{ steps.package-version.outputs.current-version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Get commit-messages
        id: get_messages
        run: |
          git log --pretty=format:"+ %s" $(git describe --tags --abbrev=0 @^)..@ >> /tmp/messages.txt
          cp /tmp/messages.txt .messages.md
          cat /tmp/messages.txt
          echo 'MESSAGES<<EOF' >> $GITHUB_ENV
          printf '%b\n' "$(cat /tmp/messages.txt)" >> $GITHUB_ENV
          echo EOF >> $GITHUB_ENV
      - name: get-npm-version
        id: package-version
        uses: martinbeentjes/npm-get-version-action@master
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.package-version.outputs.current-version}}
          release_name: Release ${{ steps.package-version.outputs.current-version}}
          body: |
            io
            ${{ env.MESSAGES }}
          draft: false
          prerelease: false

  build_release:
    name: Build & Release
    if: "startsWith(github.event.head_commit.message, 'Release')"
    needs: create_release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        node-version: [20.x]

        os: [macos-latest, ubuntu-latest, windows-latest]
        # os: [ubuntu-latest, windows-latest]
        include:
        - os: macos-latest
          OSNAME: mac
          OSEND: dmg
          FILEPART: Installer
        - os: ubuntu-latest
          OSNAME: linux
          OSEND: AppImage
          FILEPART: Installer

        - os: windows-latest
          OSNAME: win
          OSEND: exe
          FILEPART: Setup

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install Linux dependencies for robotjs
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libxtst-dev libpng++-dev libx11-dev libxkbfile-dev libsecret-1-dev libgconf-2-4 build-essential python3
        # libx11-dev provides Xutil.h
        # libxtst-dev is often needed for XTest extension (sending events)
        # libpng++-dev might be needed for screen capture parts of robotjs (good to have)
        # libxkbfile-dev for keyboard mapping
        # libsecret-1-dev and libgconf-2-4 are common Electron build dependencies on Linux
        # build-essential provides make, g++, etc.
        # python3 is needed for node-gyp
      - name: Install Node Modules
        run: yarn install --frozen-lockfile

      - name: Build Non-Win project
        if: matrix.OSNAME != 'win'
        env:
          release_version: ${{ steps.package-version.outputs.current-version}}
          REACT_APP_VERSION: ${{ steps.package-version.outputs.current-version}}
        run: GH_TOKEN=${{secrets.GH_TOKEN}} yarn dist -p "never"

      - name: Build Win project
        if: matrix.OSNAME == 'win'
        env:
          release_version: ${{ steps.package-version.outputs.current-version}}
          REACT_APP_VERSION: ${{ steps.package-version.outputs.current-version}}
        run: set GH_TOKEN=${{secrets.GH_TOKEN}} && yarn dist -p "never"

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./dist/io-${{ needs.create_release.outputs.current-version}}-${{matrix.FILEPART}}.${{matrix.OSEND}}
          asset_name: io.${{matrix.OSEND}}
          asset_content_type: application/octet-stream
