name: Create App Release

on:
  workflow_dispatch:
    inputs:
      version_override:
        description: 'Version Override. Leave empty for package.json version.'
        required: false
        type: string
        default: ''
      build_macos_intel:
        description: 'Build macOS Intel (Electron 31)'
        default: true
        type: boolean
      build_macos_arm64:
        description: 'Build macOS ARM64 (Electron 31)'
        default: true
        type: boolean
      build_ubuntu:
        description: 'Build Ubuntu Linux (Latest Electron)'
        default: true
        type: boolean
      build_windows:
        description: 'Build Windows (Latest Electron)'
        default: true
        type: boolean
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+*'

env:
  PROJECT_MAIN_ELECTRON_VERSION: '36.3.1' # Your primary, latest Electron version for Win/Linux
  MACOS_ROBOTJS_COMPATIBLE_ELECTRON_VERSION: '31.0.0' # Confirmed working for robotjs on macOS

jobs:
  prepare_release_data:
    name: Prepare Release Data
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      current_version: ${{ github.event.inputs.version_override || steps.package-version.outputs.current-version }}
      build_matrix_json: ${{ steps.set-matrix.outputs.build_matrix_json }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Get App Version from package.json
        id: package-version
        if: github.event.inputs.version_override == ''
        uses: martinbeentjes/npm-get-version-action@v1.3.0
      - name: Generate Release Notes
        id: generate_notes
        run: |
          if git describe --tags --abbrev=0 @^ > /dev/null 2>&1; then
            git log --pretty=format:"+ %s" $(git describe --tags --abbrev=0 @^)..@ > .release-notes.md
          else
            echo "+ Initial release or no previous tags found." > .release-notes.md
          fi
      - name: Create GitHub Release
        id: create_release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.version_override || steps.package-version.outputs.current-version }}
          release_name: Release ${{ github.event.inputs.version_override || steps.package-version.outputs.current-version }}
          body_path: .release-notes.md
          draft: false
          prerelease: contains(github.ref, 'beta') || contains(github.ref, 'alpha') || contains(github.ref, 'rc')
      - name: Prepare Build Matrix
        id: set-matrix
        shell: bash
        env:
          PROJECT_MAIN_ELECTRON_VERSION: ${{ env.PROJECT_MAIN_ELECTRON_VERSION }}
          MACOS_ROBOTJS_COMPATIBLE_ELECTRON_VERSION: ${{ env.MACOS_ROBOTJS_COMPATIBLE_ELECTRON_VERSION }}
        run: |
          matrix_include_array=()
          if [[ "${{ github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.build_macos_intel == true) }}" == "true" ]]; then
            matrix_include_array+=('{"platform_id": "macos_intel", "platform_name": "macOS Intel", "os_runner": "macos-13", "electron_target_version": "'$MACOS_ROBOTJS_COMPATIBLE_ELECTRON_VERSION'", "asset_file_part_dmg": "Installer-Intel", "asset_file_part_zip": "Intel-mac", "asset_extension_dmg": "dmg", "asset_extension_zip": "zip", "asset_content_type_dmg": "application/x-apple-diskimage", "asset_content_type_zip": "application/zip", "needs_rebuild": true, "cxx_flags": "-std=c++20 -stdlib=libc++", "gyp_defines": "mac_deployment_target=11.0 clang_cxx_language_standard=c++20 clang_cxx_library=libc++", "deployment_target": "11.0", "python_path_command": "which python3"}')
          fi
          if [[ "${{ github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.build_macos_arm64 == true) }}" == "true" ]]; then
            matrix_include_array+=('{"platform_id": "macos_arm64", "platform_name": "macOS ARM64", "os_runner": "macos-14", "electron_target_version": "'$MACOS_ROBOTJS_COMPATIBLE_ELECTRON_VERSION'", "asset_file_part_dmg": "Installer-ARM64", "asset_file_part_zip": "ARM64-mac", "asset_extension_dmg": "dmg", "asset_extension_zip": "zip", "asset_content_type_dmg": "application/x-apple-diskimage", "asset_content_type_zip": "application/zip", "needs_rebuild": true, "cxx_flags": "-std=c++20 -stdlib=libc++", "gyp_defines": "mac_deployment_target=11.0 clang_cxx_language_standard=c++20 clang_cxx_library=libc++", "deployment_target": "11.0", "python_path_command": "which python3"}')
          fi
          if [[ "${{ github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.build_ubuntu == true) }}" == "true" ]]; then
            matrix_include_array+=('{"platform_id": "linux", "platform_name": "Linux", "os_runner": "ubuntu-latest", "electron_target_version": "'$PROJECT_MAIN_ELECTRON_VERSION'", "asset_file_part_appimage": "Installer", "asset_extension_appimage": "AppImage", "asset_content_type_appimage": "application/x-iso9660-appimage", "needs_rebuild": true, "cxx_flags": "", "gyp_defines": "", "deployment_target": "", "python_path_command": "which python3"}')
          fi
          if [[ "${{ github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.build_windows == true) }}" == "true" ]]; then
            matrix_include_array+=('{"platform_id": "windows", "platform_name": "Windows", "os_runner": "windows-latest", "electron_target_version": "'$PROJECT_MAIN_ELECTRON_VERSION'", "asset_file_part_exe": "Setup", "asset_extension_exe": "exe", "asset_content_type_exe": "application/vnd.microsoft.portable-executable", "needs_rebuild": true, "cxx_flags": "", "gyp_defines": "", "deployment_target": "", "python_path_command": "python"}')
          fi
          joined_includes=$(IFS=,; echo "${matrix_include_array[*]}")
          final_matrix_json="{\"include\": [${joined_includes}]}"
          echo "build_matrix_json=${final_matrix_json}" >> $GITHUB_OUTPUT

  build_app: 
    name: Build App (${{ matrix.platform_name }} using Electron ${{ matrix.electron_target_version }})
    needs: prepare_release_data
    runs-on: ${{ matrix.os_runner }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.prepare_release_data.outputs.build_matrix_json) }}
    env:
      NODE_VERSION: '20.x' 
      PYTHON_VERSION: '3.11'
      MACOSX_DEPLOYMENT_TARGET: ${{ matrix.deployment_target }}
      GYP_DEFINES: ${{ matrix.gyp_defines }}
      CXXFLAGS: ${{ matrix.cxx_flags }}
      CFLAGS: '-std=c17'
      ELECTRON_VERSION_TO_BUILD_WITH: ${{ matrix.electron_target_version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install Python build dependencies
        run: python -m pip install --upgrade pip setuptools wheel
      
      - name: Temporarily set Electron version in package.json
        shell: bash
        run: |
          echo "Setting Electron version to ${{ env.ELECTRON_VERSION_TO_BUILD_WITH }} for this build job"
          # Use jq if available and robust, otherwise node or sed
          if command -v jq &> /dev/null
          then
            jq --arg version "${{ env.ELECTRON_VERSION_TO_BUILD_WITH }}" '.devDependencies.electron = $version' package.json > package.json.tmp && mv package.json.tmp package.json
          else
            node -e "let pkg = require('./package.json'); pkg.devDependencies.electron = '${{ env.ELECTRON_VERSION_TO_BUILD_WITH }}'; require('fs').writeFileSync('./package.json', JSON.stringify(pkg, null, 2));"
          fi
          echo "package.json now uses Electron:"
          grep '"electron":' package.json

      - name: Install Linux dependencies
        if: matrix.platform_id == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libxtst-dev libpng++-dev libx11-dev libxkbfile-dev libsecret-1-dev build-essential python3          
      - name: Install Node Modules (with target Electron version)
        run: yarn install --frozen-lockfile --ignore-scripts
      
      - name: Rebuild native modules
        if: matrix.needs_rebuild == true
        env:
          PYTHON_FOR_REBUILD: ${{ matrix.python_path_command }}
        run: |
          echo "Rebuilding native modules against Electron version specified in package.json (now ${{ env.ELECTRON_VERSION_TO_BUILD_WITH }})"
          echo "Effective GYP_DEFINES: $GYP_DEFINES"
          echo "Effective CXXFLAGS: $CXXFLAGS"
          PYTHON=$($PYTHON_FOR_REBUILD) yarn rebuild
      
      - name: Build Project
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
          REACT_APP_VERSION: ${{ needs.prepare_release_data.outputs.current_version }}
        run: yarn dist -p "never" 
      
      - name: Upload macOS DMG Release Asset
        if: (matrix.platform_id == 'macos_intel' || matrix.platform_id == 'macos_arm64') && startsWith(github.ref, 'refs/tags/v') && needs.prepare_release_data.outputs.upload_url != ''
        uses: actions/upload-release-asset@v1
        env: GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.prepare_release_data.outputs.upload_url }}
          asset_path: ./dist/io-${{ needs.prepare_release_data.outputs.current_version }}-${{ matrix.asset_file_part_dmg }}.${{ matrix.asset_extension_dmg }}
          asset_name: io-${{ matrix.platform_id }}.${{ matrix.asset_extension_dmg }}
          asset_content_type: ${{ matrix.asset_content_type_dmg }}

      - name: Upload macOS ZIP Release Asset
        if: (matrix.platform_id == 'macos_intel' || matrix.platform_id == 'macos_arm64') && startsWith(github.ref, 'refs/tags/v') && needs.prepare_release_data.outputs.upload_url != ''
        uses: actions/upload-release-asset@v1
        env: GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.prepare_release_data.outputs.upload_url }}
          asset_path: ./dist/io-${{ needs.prepare_release_data.outputs.current_version }}-${{ matrix.asset_file_part_zip }}.zip 
          asset_name: io-${{ matrix.platform_id }}.zip
          asset_content_type: ${{ matrix.asset_content_type_zip }}

      - name: Upload Linux AppImage Release Asset
        if: matrix.platform_id == 'linux' && startsWith(github.ref, 'refs/tags/v') && needs.prepare_release_data.outputs.upload_url != ''
        uses: actions/upload-release-asset@v1
        env: GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.prepare_release_data.outputs.upload_url }}
          asset_path: ./dist/io-${{ needs.prepare_release_data.outputs.current_version }}-${{ matrix.asset_file_part_appimage }}.${{ matrix.asset_extension_appimage }}
          asset_name: io-${{ matrix.platform_id }}.${{ matrix.asset_extension_appimage }}
          asset_content_type: ${{ matrix.asset_content_type_appimage }}

      - name: Upload Windows EXE Release Asset
        if: matrix.platform_id == 'windows' && startsWith(github.ref, 'refs/tags/v') && needs.prepare_release_data.outputs.upload_url != ''
        uses: actions/upload-release-asset@v1
        env: GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.prepare_release_data.outputs.upload_url }}
          asset_path: ./dist/io-${{ needs.prepare_release_data.outputs.current_version }}-${{ matrix.asset_file_part_exe }}.${{ matrix.asset_extension_exe }}
          asset_name: io-${{ matrix.platform_id }}.${{ matrix.asset_extension_exe }}
          asset_content_type: ${{ matrix.asset_content_type_exe }}

      - name: Upload macOS DMG Build Artifact
        if: (matrix.platform_id == 'macos_intel' || matrix.platform_id == 'macos_arm64') && github.event_name == 'workflow_dispatch'
        uses: actions/upload-artifact@v4 
        with:
          name: io-${{ matrix.platform_id }}-${{ needs.prepare_release_data.outputs.current_version }}.dmg
          path: ./dist/io-${{ needs.prepare_release_data.outputs.current_version }}-${{ matrix.asset_file_part_dmg }}.${{ matrix.asset_extension_dmg }}
          retention-days: 7
      - name: Upload macOS ZIP Build Artifact
        if: (matrix.platform_id == 'macos_intel' || matrix.platform_id == 'macos_arm64') && github.event_name == 'workflow_dispatch'
        uses: actions/upload-artifact@v4
        with:
          name: io-${{ matrix.platform_id }}-${{ needs.prepare_release_data.outputs.current_version }}.zip
          path: ./dist/io-${{ needs.prepare_release_data.outputs.current_version }}-${{ matrix.asset_file_part_zip }}.zip
          retention-days: 7
      - name: Upload Linux AppImage Build Artifact
        if: matrix.platform_id == 'linux' && github.event_name == 'workflow_dispatch'
        uses: actions/upload-artifact@v4
        with:
          name: io-${{ matrix.platform_id }}-${{ needs.prepare_release_data.outputs.current_version }}.AppImage
          path: ./dist/io-${{ needs.prepare_release_data.outputs.current_version }}-${{ matrix.asset_file_part_appimage }}.${{ matrix.asset_extension_appimage }}
          retention-days: 7
      - name: Upload Windows EXE Build Artifact
        if: matrix.platform_id == 'windows' && github.event_name == 'workflow_dispatch'
        uses: actions/upload-artifact@v4
        with:
          name: io-${{ matrix.platform_id }}-${{ needs.prepare_release_data.outputs.current_version }}.exe
          path: ./dist/io-${{ needs.prepare_release_data.outputs.current_version }}-${{ matrix.asset_file_part_exe }}.${{ matrix.asset_extension_exe }}
          retention-days: 7